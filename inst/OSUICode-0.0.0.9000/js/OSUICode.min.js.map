{
  "version": 3,
  "sources": ["../../../srcjs/init.js", "../../../srcjs/widgets.js", "../../../srcjs/test.js"],
  "sourcesContent": ["$( document ).ready(function() {\n // collect all data elements stored in body\n var config = $(document).find(\"script[data-for='app']\");\n config = JSON.parse(config.html());\n\n // always erase existing root value just in case the user changes the root.\n // This may be harmful\n config.root = \"#app\";\n\n  // store app methods\n  config.methods =  {\n    toggleDarkTheme: function() {\n      var self = this;\n      var $html = self.$(\"html\");\n      $html.toggleClass(\"theme-dark\");\n    }\n  };\n\n  // check if the app is intended to be a PWA\n  var isPWA = $('body').attr('data-pwa') === \"true\";\n\n  if (isPWA) {\n    config.serviceWorker = {\n      path: window.location.pathname + \"service-worker.js\",\n      scope: window.location.pathname\n    };\n  }\n\n  // Widgets cache\n  config.data = function() {\n    return {\n      // any other widget type to cache ...\n      gauge: []\n    };\n  };\n\n  // create app instance\n  app = new Framework7(config);\n\n  // init main view\n  mainView = app.views.create('.view-main');\n\n  // Custom disconnect screen\n  $(document).on(\"shiny:connected\", function(event) {\n    Shiny.shinyapp.onDisconnected = function() {\n      // Add gray-out overlay, if not already present\n      var $overlay = $('#shiny-disconnected-overlay');\n      if ($overlay.length === 0) {\n        $(document.body).append('<div id=\"shiny-disconnected-overlay\"></div>');\n      }\n    };\n  });\n\n  $(document).on(\"shiny:disconnected\", function(event) {\n    var reconnectToast = app.toast\n      .create({\n        position: \"center\",\n        text:\n          'Oups... disconnected </br> </br> <div class=\"row\"><button onclick=\"Shiny.shinyapp.reconnect();\" class=\"toast-button button color-green col\">Reconnect</button><button onclick=\"location.reload();\" class=\"toast-button button color-red col\">Reload</button></div>'\n      })\n      .open();\n\n    $('.toast').css(\"background-color\", \"#1c1c1d\");\n\n    // close toast whenever a choice is made ...\n    $(\".toast-button\").on(\"click\", function() {\n      reconnectToast.close();\n    });\n  });\n\n\n  // Create custom install UI\n  var installToast = app.toast.create({\n    position: 'center',\n    text: '<button id=\"install-button\" class=\"toast-button button color-green\">Install</button>',\n  });\n\n  var deferredPrompt;\n  // Handle install event\n  $(window).on('beforeinstallprompt', (e) => {\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\n    e.preventDefault();\n    // Stash the event so it can be triggered later.\n    deferredPrompt = e.originalEvent;\n    // Show install trigger\n    installToast.open();\n  });\n\n  // Installation must be done by a user gesture!\n  // close toast whenever a choice is made ... Give time\n  // to the toast to be created before event registration.\n  app.utils.nextTick(function() {\n    $('#install-button').on('click', function() {\n      // close install toast\n      installToast.close();\n      if (!deferredPrompt) {\n        // The deferred prompt isn't available.\n        return;\n      }\n      // Show the install prompt.\n      deferredPrompt.prompt();\n      // Log the result\n      deferredPrompt.userChoice.then((result) => {\n        console.log('\uD83D\uDC4D', 'userChoice', result);\n        // Reset the deferred prompt variable, since\n        // prompt() can only be called once.\n        deferredPrompt = null;\n      });\n    });\n  }, 500);\n\n  //var notification = app.notification.create({\n  //  text: 'Hello, how are you?',\n  //  on: {\n  //    opened: function () {\n  //      console.log('Notification opened');\n  //    }\n  //  }\n  //}).open();\n\n  // equivalent to setTimeout ...\n  //app.utils.nextTick(function() {\n  //  var otherMessage = app.notification.create({\n  //    text: 'You look great!'\n  //  }).open();\n  //}, 2000);\n\n  // taphold test\n  $('#mybutton').on('taphold', function () {\n    app.dialog.alert('Tap hold fired!');\n  });\n\n\n  // tapHold custom css\n  if (config.hasOwnProperty(\"touch\")) {\n    if (config.touch.tapHold) {\n      $(\"<style>\")\n        .prop(\"type\", \"text/css\")\n        .html(\n          `\n          -moz-user-select: none;\n          -webkit-user-select: none;\n          user-select: none;`\n        )\n        .appendTo(\"head\");\n    }\n  }\n\n  // Set color theme\n  if (config.hasOwnProperty('color')) {\n    var colorCSS = app.utils.colorThemeCSSProperties(config.color);\n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`:root {\n        --f7-theme-color: ${colorCSS[\"--f7-theme-color\"]};\n        --f7-theme-color-rgb: ${colorCSS[\"--f7-theme-color-rgb\"]};\n        --f7-theme-color-shade: ${colorCSS[\"--f7-theme-color-shade\"]};\n        --f7-theme-color-tint: ${colorCSS[\"--f7-theme-color-tint\"]};\n      }`)\n      .appendTo(\"head\");\n  }\n\n  // Filled theme\n  if (!config.hasOwnProperty('filled')) config.filled = false;\n  if (config.filled) {\n    var filledCSS = `\n      :root,\n      :root.theme-dark,\n      :root .theme-dark {\n        --f7-bars-bg-color: var(--f7-theme-color);\n        --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n        --f7-bars-translucent-opacity: 0.9;\n        --f7-bars-text-color: #fff;\n        --f7-bars-link-color: #fff;\n        --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n        --f7-bars-border-color: transparent;\n        --f7-tabbar-link-active-color: #fff;\n        --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n        --f7-sheet-border-color: transparent;\n        --f7-tabbar-link-active-border-color: #fff;\n      }\n      .appbar,\n      .navbar,\n      .toolbar,\n      .subnavbar,\n      .calendar-header,\n      .calendar-footer {\n        --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n        --f7-link-highlight-color: var(--f7-link-highlight-white);\n        --f7-button-text-color: #fff;\n        --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n      }\n      .navbar-large-transparent,\n      .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #000;\n\n        --r: 0;\n        --g: 122;\n        --b: 255;\n        --progress: var(--f7-navbar-large-collapse-progress);\n        --f7-bars-link-color: rgb(\n          calc(var(--r) + (255 - var(--r)) * var(--progress)),\n          calc(var(--g) + (255 - var(--g)) * var(--progress)),\n          calc(var(--b) + (255 - var(--b)) * var(--progress))\n        );\n      }\n      .theme-dark .navbar-large-transparent,\n      .theme-dark .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #fff;\n    }`;\n\n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`${filledCSS}`)\n      .appendTo(\"head\");\n  }\n\n  // dark mode\n  if (!config.hasOwnProperty('dark')) config.dark = false;\n  if (config.dark) {\n    app.methods.toggleDarkTheme();\n  }\n});\n", "$( document ).ready(function() {\n  const uiWidgets = [\"gauge\", \"swiper\", \"searchbar\"];\n  const serverWidgets = [\"toast\", \"photoBrowser\", \"notification\"];\n  const widgets = uiWidgets.concat(serverWidgets);\n\n  // Instantiate a widget\n  activateWidget = function(widget) {\n    // Handle ui side widgets\n    if (uiWidgets.indexOf(widget) > -1) {\n      $(\".\" + widget).each(function() {\n        var $el = $(this);\n        var config = $(document).find(\n          \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n        );\n        config = JSON.parse(config.html());\n        // add the id\n        config.el = '#' + $el.attr(\"id\");\n\n        // feed the create method\n        var w = app[widget].create(config);\n        // Store the widget instance in the app data cache\n        app.data[widget][$el.attr(\"id\")] = w;\n      });\n    } else {\n      // This concerns toasts, notifications, photoBrowser, ...\n      // that don't have any UI element in the DOM before creating\n      // the widget instance.\n      Shiny.addCustomMessageHandler(widget, function(message) {\n\n        // Let shiny lnow about the widget state\n        if (message.id !== undefined) {\n          message.on = {\n            opened: function() {\n              Shiny.setInputValue(message.id, true);\n            },\n            closed: function() {\n              Shiny.setInputValue(message.id, false);\n            }\n          };\n        }\n\n        var w = app[widget].create(message);\n        w.open();\n      });\n    }\n  };\n\n  // Loop over all widgets to activate them\n  widgets.forEach(function(w) {\n    activateWidget(w);\n  });\n\n\n  // Update widget instances\n  Shiny.addCustomMessageHandler('update-instance', function(message) {\n    // Recover in which array is stored the given instance.\n    // Uniqueness is ensured since HTML id are supposed to be unique.\n    var instanceFamily;\n    for (const property in app.data) {\n      for (const e in app.data[property]) {\n        if (e === message.id) {\n          instanceFamily = property;\n        }\n      }\n    }\n\n    var oldInstance = app.data[instanceFamily][message.id];\n    var oldConfig = oldInstance.params;\n    var newConfig = app.utils.extend(oldConfig,  message.options);\n\n    // Destroy old instance\n    oldInstance.destroy();\n    // Create new config\n    var newInstance = app[instanceFamily].create(newConfig);\n    // Update app data\n    app.data[instanceFamily][message.id] = newInstance;\n  });\n\n});\n", "$( document ).ready(function() {\n \n});\n"],
  "mappings": "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",
  "names": []
}
